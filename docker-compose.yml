services:
  postgres:
    image: postgres:15-alpine
    container_name: codementorx_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-codementorx_db}
      POSTGRES_USER: ${DB_USER:-codementorx_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-@code123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-codementorx_user} -d ${DB_NAME:-codementorx_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - codementorx_network

  django:
    build:
      context: ./backend/django_auth
      dockerfile: Dockerfile
      target: production
    container_name: codementorx_django
    ports:
      - "8000:8000"
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${DB_USER:-codementorx_user}:${DB_PASSWORD:-@code123}@postgres:5432/${DB_NAME:-codementorx_db}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,django}
      - CORS_ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173,http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000,http://fastapi:8001
      - EMAIL_HOST_USER=${EMAIL_HOST_USER:-}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD:-}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - django_static:/app/staticfiles
      - django_media:/app/media
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - codementorx_network

  fastapi:
    build:
      context: ./backend/chatbot
      dockerfile: Dockerfile
      target: production
    container_name: codementorx_fastapi
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-codementorx_user}:${DB_PASSWORD:-@code123}@postgres:5432/${DB_NAME:-codementorx_db}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AI_MODEL_NAME=${AI_MODEL_NAME:-gpt-4o-mini}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DJANGO_API_URL=http://django:8000
      - CORS_ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173,http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000,http://django:8000
      - DEBUG=${DEBUG:-False}
    depends_on:
      postgres:
        condition: service_healthy
      django:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - codementorx_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_DJANGO_API_URL=${VITE_DJANGO_API_URL:-http://localhost:8000}
        - VITE_CHATBOT_API_URL=${VITE_CHATBOT_API_URL:-http://localhost:8001/api}
        - VITE_APP_NAME=${VITE_APP_NAME:-CodementorX}
    container_name: codementorx_frontend
    ports:
      - "5173:3000"
    depends_on:
      - django
      - fastapi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - codementorx_network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:1.25-alpine
    container_name: codementorx_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - django_static:/var/www/static:ro
      - django_media:/var/www/media:ro
    depends_on:
      - django
      - fastapi
      - frontend
    restart: unless-stopped
    networks:
      - codementorx_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  django_static:
    driver: local
  django_media:
    driver: local

networks:
  codementorx_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16