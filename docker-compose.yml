# docker-compose.yml - CodeMentorX Complete Stack
# PostgreSQL + Django + FastAPI + React containerized services

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: codementorx_postgres
    restart: unless-stopped
    
    env_file:
      - .env
    
    environment:
      POSTGRES_DB: codementorx_db
      POSTGRES_USER: codementorx_user
      POSTGRES_PASSWORD: "@code123"
    
    ports:
      - "5433:5432"
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database:/docker-entrypoint-initdb.d
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codementorx_user"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    networks:
      - codementorx-network

  # Django Authentication Service  
  django:
    build: 
      context: ./backend/django_auth
      dockerfile: Dockerfile
    container_name: codementorx_django
    restart: unless-stopped
    
    env_file:
      - .env
    
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-False}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL:-admin@codementorx.com}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD:-admin123}
      EMAIL_BACKEND: ${EMAIL_BACKEND:-django.core.mail.backends.console.EmailBackend}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-True}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER:-}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD:-}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}
    
    ports:
      - "8000:8000"
    
    volumes:
      - django_static:/app/staticfiles
      - django_media:/app/media
    
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    
    depends_on:
      - postgres
    
    networks:
      - codementorx-network

  # FastAPI Chatbot Service
  fastapi:
    build:
      context: ./backend/chatbot
      dockerfile: Dockerfile
    container_name: codementorx_fastapi
    restart: unless-stopped
    
    env_file:
      - .env
    
    environment:
      FASTAPI_HOST: 0.0.0.0
      FASTAPI_PORT: 8001
      DEBUG: ${DEBUG:-False}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_API_BASE: ${OPENAI_API_BASE:-https://api.openai.com/v1}
      AI_MODEL_NAME: ${AI_MODEL_NAME:-gpt-4o-mini}
      DJANGO_API_URL: http://django:8000
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    
    ports:
      - "8001:8001"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    depends_on:
      - django
    
    networks:
      - codementorx-network

  # React Frontend Service (using existing container)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_DJANGO_API_URL: ${VITE_DJANGO_API_URL:-http://localhost:8000}
        VITE_CHATBOT_API_URL: ${VITE_CHATBOT_API_URL:-http://localhost:8001/api}
        VITE_APP_NAME: ${VITE_APP_NAME:-CodementorX}
    container_name: codementorx_frontend
    restart: unless-stopped
    
    env_file:
      - .env
    
    ports:
      - "5173:3000"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    depends_on:
      - django
      - fastapi
    
    networks:
      - codementorx-network

volumes:
  postgres_data:
    driver: local
  django_static:
    driver: local
  django_media:
    driver: local

networks:
  codementorx-network:
    driver: bridge